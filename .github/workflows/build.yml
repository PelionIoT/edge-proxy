name: Build
on: push

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: edge-proxy-'${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  build-all:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'
      - name: Set GitHub access token via git config
        run: | 
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "git@github.com:"
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github".insteadOf "https://github"
      - run: git clone git@github.com:PelionIoT/scripts-internal.git
      - name: Build all
        run: scripts-internal/golang/go_build_script.sh --all

  go-vet:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'
      - name: Set GitHub access token via git config
        run: | 
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "git@github.com:"
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github".insteadOf "https://github"
      - run: git clone git@github.com:PelionIoT/scripts-internal.git
      - run: ls -al
      - name: Run go vet (findings may not increase)
        run: scripts-internal/ci/more-lines-checker.sh ${{ github.event.repository.default_branch }} ${{ github.ref_name }} "scripts-internal/golang/go_vet_script.sh --all"

  golint-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'
      - name: Set GitHub access token via git config
        run: | 
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "git@github.com:"
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github".insteadOf "https://github"
      - run: git clone git@github.com:PelionIoT/scripts-internal.git
      - run: ls -al
      - name: Run golint-checker (findings may not increase)
        run: scripts-internal/ci/more-lines-checker.sh ${{ github.event.repository.default_branch }} ${{ github.ref_name }} "scripts-internal/golang/golint_script.sh --all"

  go-rpc-test:
    runs-on: ubuntu-latest
    env: 
      CLOUD_API_KEY : ${{ secrets.EDGE_PROXY_CI_CLOUD_ACCESS__KEY }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'
      - name: Set GitHub access token via git config
        run: | 
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "git@github.com:"
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github".insteadOf "https://github"
      - name: Clone scripts-internal and mbed-edge repos
        run: |
          git clone git@github.com:PelionIoT/scripts-internal.git
          git clone git@github.com:PelionIoT/mbed-edge.git
      - name: Get pre-requisites
        run: |
          sudo apt-get update && \
          DEBIAN_FRONTEND="noninteractive" sudo apt-get -y install tzdata git curl \
          build-essential libc6-dev cmake
      - name: Build edge-proxy
        run: |
          cp scripts-internal/client/credential_files/edge_proxy_ci_cred_file.c mbed-edge/config/mbed_cloud_dev_credentials.c
          cd mbed-edge
          git submodule update --init
          mkdir build
          cd build
          cmake -DDEVELOPER_MODE=ON -DFIRMWARE_UPDATE=OFF ..
          make
      - name: Run go tests against mbed-edge and clean up
        run: |
          mbed-edge/build/bin/edge-core &
          sleep 3
          scripts-internal/golang/go_test_script.sh --all
          devid=$(curl --no-progress-meter localhost:8080/status | jq -r '."endpoint-name"')
          echo Our edge-core Device ID is $devid
          edgepid=$(ps -aux |grep bin/edge-core | awk '{print $2}' | head -n1)
          echo PID for edge-core is $edgepid, killing it
          kill $edgepid
          echo Delete $devid via Izuma V3 REST API
          scripts-internal/cloud/delete-device.sh $devid ${{ secrets.EDGE_PROXY_CI_CLOUD_ACCESS__KEY }}

  run-pysh-check:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      # Install pyshcheck tooling
      - run: sudo apt install pycodestyle pydocstyle black
      # git instead of rules to use access token
      - run: git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "git@github.com:"
      - run: git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github".insteadOf "https://github"
      # Linux coreutils is already installed wc -command can be found.
      - run: git clone git@github.com:PelionIoT/scripts-internal.git
      #- run: git clone https://github.com/PelionIoT/scripts-internal.git
      - run: echo "." >scripts-internal/.nopyshcheck
      - run: scripts-internal/pysh-check/pysh-check.sh --workdir .